{"remainingRequest":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\src\\api\\axios-util.js","dependencies":[{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\src\\api\\axios-util.js","mtime":1602573201750},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/\\u5C0F\\u6CA1\\u6CA1/Desktop/cxl/runboo01/frontend-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.$get = $get;\nexports.$post = $post;\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar $axios = function $axios(options) {\n  return new Promise(function (resolve, reject) {\n    // 默认配置 axios 实例\n    var instance = _axios.default.create({\n      baseURL: process.env.VUE_APP_BASE_API,\n      // 默认请求 ip\n      headers: {\n        // 默认 json 请求\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      // timeout: process.env.VUE_APP_Timeout, // 请求时间\n      paramsSerializer: function paramsSerializer(params) {\n        // 序列化函数\n        return _qs.default.stringify(params);\n      }\n    }); // 请求配置\n\n\n    instance.interceptors.request.use(function (config) {\n      // 请求开始的时候可以修改默认配置选项\n      // console.log('请求前拦截', config);\n      // 可以配置header的token等验证信息\n      // config.headers['organizationId'] = organizationId;\n      if (_store.default.getters.token) {\n        config.headers['token'] = _store.default.getters.token;\n      }\n\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    }); // 响应配置\n\n    instance.interceptors.response.use(function (response) {\n      // debugger\n      var resData; // console.log(response)\n\n      if (response.data === undefined) {\n        resData = JSON.parse(response.request.responseText);\n      } else {\n        resData = response.data;\n      }\n\n      if (resData.code) {\n        if (resData.code !== 200) {\n          (0, _elementUi.Message)({\n            message: resData.message\n          });\n        }\n      }\n\n      return resData;\n    }, function (error) {\n      // console.log(error)\n      if (error && error.response) {\n        // 根据业务写具体的报错信息\n        switch (error.response.status) {\n          case 400:\n            error.response.data.message = '错误请求';\n            break;\n        }\n      }\n\n      if (error.message) {\n        // 错误提示弹框\n        (0, _elementUi.Message)({\n          message: error.message\n        });\n      }\n\n      return Promise.reject(error.message);\n    }); // 请求处理\n\n    instance(options).then(function (res) {\n      resolve(res);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}; // 导出常用请求方法\n\n\nfunction $get(url, params) {\n  return $axios({\n    url: url,\n    method: 'get',\n    params: params\n  });\n}\n\nfunction $post(url, data) {\n  return $axios({\n    url: url,\n    method: 'post',\n    data: data\n  });\n}\n\nvar _default = $axios;\nexports.default = _default;",{"version":3,"sources":["C:/Users/小没没/Desktop/cxl/runboo01/frontend-web/src/api/axios-util.js"],"names":["$axios","options","Promise","resolve","reject","instance","axios","create","baseURL","process","env","VUE_APP_BASE_API","headers","paramsSerializer","params","qs","stringify","interceptors","request","use","config","store","getters","token","error","response","resData","data","undefined","JSON","parse","responseText","code","message","status","then","res","catch","$get","url","method","$post"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\nimport { Message } from 'element-ui'\nimport store from '@/store'\n\nconst $axios = (options) => {\n  return new Promise((resolve, reject) => {\n    // 默认配置 axios 实例\n    const instance = axios.create({\n      baseURL: process.env.VUE_APP_BASE_API, // 默认请求 ip\n      headers: { // 默认 json 请求\n        'Content-Type': 'application/json;charset=UTF-8'\n      },\n      // timeout: process.env.VUE_APP_Timeout, // 请求时间\n      paramsSerializer(params) { // 序列化函数\n        return qs.stringify(params)\n      }\n    })\n    // 请求配置\n    instance.interceptors.request.use(config => {\n      // 请求开始的时候可以修改默认配置选项\n      // console.log('请求前拦截', config);\n      // 可以配置header的token等验证信息\n      // config.headers['organizationId'] = organizationId;\n      if (store.getters.token) {\n        config.headers['token'] = store.getters.token\n      }\n      return config\n    }, error => {\n      return Promise.reject(error)\n    })\n    // 响应配置\n    instance.interceptors.response.use(response => {\n      // debugger\n      let resData\n      // console.log(response)\n      if (response.data === undefined) {\n        resData = JSON.parse(response.request.responseText)\n      } else {\n        resData = response.data\n      }\n      if (resData.code) {\n        if (resData.code !== 200) {\n          Message({ message: resData.message })\n        }\n      }\n      return resData\n    }, error => {\n      // console.log(error)\n      if (error && error.response) {\n        // 根据业务写具体的报错信息\n        switch (error.response.status) {\n          case 400:\n            error.response.data.message = '错误请求'\n            break\n        }\n      }\n      if (error.message) {\n        // 错误提示弹框\n        Message({\n          message: error.message\n        })\n      }\n      return Promise.reject(error.message)\n    })\n    // 请求处理\n    instance(options).then((res) => {\n      resolve(res)\n    }).catch((error) => {\n      reject(error)\n    })\n  })\n}\n\n// 导出常用请求方法\nexport function $get(url, params) {\n  return $axios({\n    url: url,\n    method: 'get',\n    params\n  })\n}\n\nexport function $post(url, data) {\n  return $axios({\n    url: url,\n    method: 'post',\n    data\n  })\n}\n\nexport default $axios\n"]}]}