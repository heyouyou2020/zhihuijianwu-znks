{"remainingRequest":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\src\\components\\Charts\\LineMarker.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\src\\components\\Charts\\LineMarker.vue","mtime":1600928645047},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\小没没\\Desktop\\cxl\\runboo01\\frontend-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport echarts from 'echarts'\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    chartData: {\n      type: Array,\n      default: () => []\n    },\n    xAxisData: {\n      type: Array,\n      default: () => []\n    },\n    isShowLegend: {\n      type: Boolean,\n      default: false\n    },\n    colorArr: {\n      type: Array,\n      default: function() {\n        return ['#5fb9ff', '#ff958a', '#66dee6', '#ffc343', '#8a6538', '#50c0a5', '#c69150', '#a1b34c']\n      },\n    },\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    id: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '200px'\n    },\n    height: {\n      type: String,\n      default: '200px'\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  mounted() {\n    this.initChart()\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  watch: {\n    chartData: function(val) {\n      const seriesData = []\n      const legendData = []\n      this.chartData.forEach((item, index) => {\n        legendData.push(item.name)\n        seriesData.push({\n          name: item.name,\n          type: item.type || 'line',\n          data: item.data,\n          smooth: true,\n          symbol: 'circle',\n          symbolSize: 5,\n          showSymbol: false,\n          lineStyle: {\n            normal: {\n              width: 3\n            }\n          }\n        })\n      })\n      this.option.xAxis[0].data = val[0].data.map(function(data2) {\n        return data2.name\n      })\n      this.option.series = seriesData\n      this.option.legend.data = legendData\n      this.chart.setOption(this.option)\n    }\n  },\n  methods: {\n    initChart() {\n      const _this = this\n      this.chart = echarts.init(document.getElementById(this.id))\n\n      this.option = {\n        color: _this.colorArr,\n        title: {\n          top: 0,\n          text: _this.titleText,\n          textStyle: {\n            fontWeight: 'normal',\n            fontSize: 16,\n            color: '#53668d'\n          },\n          left: '1%'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            lineStyle: {\n              color: '#dfdfdf'\n            }\n          }\n        },\n        legend: {\n          show: _this.isShowLegend,\n          top: 6,\n          icon: 'rect',\n          itemWidth: 14,\n          itemHeight: 5,\n          itemGap: 13,\n          left: 'center',\n          textStyle: {\n            fontSize: 12,\n            color: '#4f5e7b'\n          }\n        },\n        grid: {\n          top: 50,\n          left: '2%',\n          right: '2%',\n          bottom: 0,\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          snap: true,\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            interval: 0,\n            rotate: 50,\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              color: '#53668d'\n            }\n          },\n          data: _this.xAxisData\n        }],\n        yAxis: [{\n          type: 'value',\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              color: '#f0f0f0'\n            }\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              color: '#53668d'\n            }\n          },\n          axisLabel: {\n            inside: false,\n            formatter: '{value}\\n'\n          }\n        }],\n        series: []\n      }\n      this.chart.setOption(this.option)\n    }\n  }\n}\n",{"version":3,"sources":["LineMarker.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineMarker.vue","sourceRoot":"src/components/Charts","sourcesContent":["<template>\n  <div :id=\"id\" :class=\"className\" :style=\"{height:height,width:width}\" />\n</template>\n\n<script>\nimport echarts from 'echarts'\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    chartData: {\n      type: Array,\n      default: () => []\n    },\n    xAxisData: {\n      type: Array,\n      default: () => []\n    },\n    isShowLegend: {\n      type: Boolean,\n      default: false\n    },\n    colorArr: {\n      type: Array,\n      default: function() {\n        return ['#5fb9ff', '#ff958a', '#66dee6', '#ffc343', '#8a6538', '#50c0a5', '#c69150', '#a1b34c']\n      },\n    },\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    id: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '200px'\n    },\n    height: {\n      type: String,\n      default: '200px'\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  mounted() {\n    this.initChart()\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  watch: {\n    chartData: function(val) {\n      const seriesData = []\n      const legendData = []\n      this.chartData.forEach((item, index) => {\n        legendData.push(item.name)\n        seriesData.push({\n          name: item.name,\n          type: item.type || 'line',\n          data: item.data,\n          smooth: true,\n          symbol: 'circle',\n          symbolSize: 5,\n          showSymbol: false,\n          lineStyle: {\n            normal: {\n              width: 3\n            }\n          }\n        })\n      })\n      this.option.xAxis[0].data = val[0].data.map(function(data2) {\n        return data2.name\n      })\n      this.option.series = seriesData\n      this.option.legend.data = legendData\n      this.chart.setOption(this.option)\n    }\n  },\n  methods: {\n    initChart() {\n      const _this = this\n      this.chart = echarts.init(document.getElementById(this.id))\n\n      this.option = {\n        color: _this.colorArr,\n        title: {\n          top: 0,\n          text: _this.titleText,\n          textStyle: {\n            fontWeight: 'normal',\n            fontSize: 16,\n            color: '#53668d'\n          },\n          left: '1%'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            lineStyle: {\n              color: '#dfdfdf'\n            }\n          }\n        },\n        legend: {\n          show: _this.isShowLegend,\n          top: 6,\n          icon: 'rect',\n          itemWidth: 14,\n          itemHeight: 5,\n          itemGap: 13,\n          left: 'center',\n          textStyle: {\n            fontSize: 12,\n            color: '#4f5e7b'\n          }\n        },\n        grid: {\n          top: 50,\n          left: '2%',\n          right: '2%',\n          bottom: 0,\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          snap: true,\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            interval: 0,\n            rotate: 50,\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              color: '#53668d'\n            }\n          },\n          data: _this.xAxisData\n        }],\n        yAxis: [{\n          type: 'value',\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            lineStyle: {\n              color: '#f0f0f0'\n            }\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              color: '#53668d'\n            }\n          },\n          axisLabel: {\n            inside: false,\n            formatter: '{value}\\n'\n          }\n        }],\n        series: []\n      }\n      this.chart.setOption(this.option)\n    }\n  }\n}\n</script>\n"]}]}